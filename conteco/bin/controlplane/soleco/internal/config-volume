#!/usr/bin/env bash
shopt -s nullglob
imageName=$1
component=$2

folder="soleco"
if [[ "$component" != "." ]] ; then folder="soleco/$component"; fi
componentPath="/conteco/pwd/${imageName}/${folder}"

# generate _component/configuration
cp "${componentPath}/_module/_configuration" "${componentPath}/_component/_configuration"
cat "${componentPath}/_configuration/_configuration" >> ${componentPath}/_component/_configuration

if [[ -d ${componentPath}/_module/_configs ]] ; then
  rm -rf ${componentPath}/_component/_configs/*
  for f in ${componentPath}/_module/_configs/*
	do
    folderName="$(basename $f)"
    mkdir ${componentPath}/_component/_configs/$folderName
    if [[ -d ${componentPath}/_configuration/_configs/$folderName ]] ; then
      cp ${componentPath}/_configuration/_configs/$folderName/* ${componentPath}/_component/_configs/$folderName
    else
      cp ${componentPath}/_module/_configs/$folderName/* ${componentPath}/_component/_configs/$folderName
    fi
  done;
fi

if [[ -d ${componentPath}/_module/_volumes ]] ; then
  rm -rf ${componentPath}/_component/_volumes/*
  for f in ${componentPath}/_module/_volumes/*
	do
    itemName="$(basename $f)"
    if [[ ${componentPath}/_configuration/_volumes/$itemName ]] ; then
      source="${componentPath}/_configuration/_volumes"
    else
      source="${componentPath}/_module/_volumes"
    fi
    if [[ -d $source/$itemName ]] ; then
      mkdir ${componentPath}/_component/_volumes/$itemName
      cp $source/$itemName/* ${componentPath}/_component/_volumes/$itemName
    else
      cp $source/$itemName ${componentPath}/_component/_volumes/$itemName
    fi
  done;
fi

. set-config $imageName $component

# REPLACE _component VOLUMES WITH _configuration VOLUMES


# apply environment variables to all volume files
sourcePath="${componentPath}/_component/_configs"
destinationPath="${componentPath}/_component/_volumes"
IFS=$'\n' read -d '' -r -a volumes < $componentPath/_component/volumes-initialised
for volumeSettings in ${volumes[@]};
do
	volumeName=$(echo $volumeSettings | cut -d':' -f 1)
	for f in $sourcePath/$volumeName/*
	do
		level1="$(basename $f)"
		if [[ -f $f ]] ; then cat $f | envsubst > $destinationPath/$volumeName/$level1;
	  else
			for g in $f/*
			do
				level2="$(basename $g)"
				if [[ -f $g ]] ; then cat $g | envsubst > $destinationPath/$volumeName/$level1/$level2;
			  else
					for h in $g/*
					do
            level3="$(basename $h)"
    				if [[ -f $h ]] ; then cat $h | envsubst > $destinationPath/$volumeName/$level1/$level2/$level3;
    			  else
    					for k in $h/*
    					do
                level4="$(basename $k)"
        				if [[ -f $k ]] ; then cat $k | envsubst > $destinationPath/$volumeName/$level1/$level2/$level3/$level4;
        			  else
        					for l in $k/*
        					do
        						level5="$(basename $l)"
        						if [[ -f $l ]] ; then cat $l | envsubst > $destinationPath/$volumeName/$level1/$level2/$level3/$level4/$level5;
                  else executionplane-error "$l: Environment variable substitution only up to 3 folder levels deep!"; fi
        				  done;
        				fi
    				  done;
    				fi
				  done;
				fi
		  done;
		fi
	done;
done;
